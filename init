global struct links
% struktura robota
links(1).u = [0;0;0];
links(1).p0= [0.012;0;0.017;1];
links(1).w = [0;0;1];

links(2).u = [0.012;0;0.017];
links(2).p0= [0.012;0;0.0765;1];
links(2).w = [0;1;0];

links(3).u = [0.012;0;0.0765];
links(3).p0= [0.036;0;0.204;1];
links(3).w = [0;1;0];

links(4).u = [0.036;0;0.204];
links(4).p0= [0.16;0;0.204;1];
links(4).w = [0;1;0];
    

syms theta1 theta2 theta3 theta4
syms dtheta1 dtheta2 dtheta3 dtheta4
daszek = @(s) [0, -s(3), s(2), s(4) ; ...
    s(3), 0, -s(1), s(5) ; ...
    -s(2) s(1) 0 s(6) ; ...
    0     0    0 0    ];

for i=1:4
    % s = [w ; -w x u]
    links(i).s = [links(i).w ; -cross(links(i).w,links(i).u)];
    links(i).sdaszek = daszek(links(i).s);
end;
%Pozyskanie aktualnych joint state'sÃ³w
joinstates = rossubscriber("/joint_states");
syms theta1 theta2 theta3 theta4;
[p,A1,A2,A3,A4] = kin( links, [theta1, theta2, theta3, theta4] );
% Obliczanie jakobianu
global J;
J = [links(1).sdaszek * p(:,4) , ...
    A1 * links(2).sdaszek * inv(A1) * p(:,4) , ...
    A1 * A2 * links(3).sdaszek *inv(A2) * inv(A1) * p(:,4), ...
  A1 * A2 *A3 * links(4).sdaszek *inv(A3)*inv(A2) * inv(A1) * p(:,4) ];
J=simplify(J);
